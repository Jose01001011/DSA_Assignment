// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

listener http:Listener ep0 = new (9090, config = {host: "localhost"});

type Lecturer record {
    readonly int staffNumber ;
    string  officeNumber;
    string staffName;
    string AssignedCourses;
    //map<string> AssignedCourses;
};

type NewLecturer record {| //We don't need an ID in this table because its generated by the service
  readonly int staffNumber ;
    string  officeNumber;
    string staffName;
    string AssignedCourses;
|};

//Intergrating Ballerina Tables
table<Lecturer> key(staffNumber ) users = table [
   	    {staffNumber :1, officeNumber:"A1", staffName: "Max", AssignedCourses: "DSA106"}
   	];


type ErrorDetails record {
    string message;
    string details;
};

 public type staffNumber_Conflict record {|
    *http:Conflict;
    ErrorMsg body;
|};

 public type staffNumber_NotFound record {|
    *http:NotFound;
    ErrorMsg body;
|};

type UserNotFound record {|
    *http:NotFound; //This is called type inclusion, if the user is not found then it becomes such type of a particular record. //http:BadRequest
    ErrorDetails body;
|};

public  type ErrorMsg record {|
    string errormsg;
|};

table<Lecturer> key(staffNumber) lecturerTable = table[];

 type CreatedLecturerEntries record {|
    *http:Created;
     Lecturer[] body;
|};



service / on ep0 {
    # Retrieves a list of all lecturers within the faculty.
    #
    # + return - Shows a list of lecturers. 
    resource function get lecturers() returns Lecturer[]|error  {
        return users.toArray();
    }
    # Add a new lecturer.
    #
    # + payload - parameter description 
    # + return - The lecturer was created successfully. 
    resource function post lecturers(@http:Payload Lecturer payload) returns Lecturer {
    }
    # Retrieve the details of a specific lecturer by their staff number.
    #
    # + staffNumber - parameter description 
    # + return - returns can be any of following types
    # Lecturer (The lecturer details.)
    # http:NotFound (The lecturer with the specified staff number does not exist.)
    resource function get lecturers/[int staffNumber]() returns Lecturer|http:NotFound|error {
        Lecturer? lecturer = lecturerTable[staffNumber];
        if lecturer is () {
            UserNotFound userNotfound = {
                body: {message: string `staffNumber: ${staffNumber}`, details: string `lecturer/${staffNumber}`}
            };
            return userNotfound;
        }
        return lecturer;
    }
    # Update an existing lecturer's information.
    #
    # + staffNumber - parameter description 
    # + payload - parameter description 
    # + return - returns can be any of following types
    # Lecturer (The lecturer information was updated successfully.)
    # http:NotFound (The lecturer with the specified staff number does not exist.)
    resource function put lecturers/[int staffNumber](@http:Payload Lecturer payload) returns Lecturer|http:NotFound {
    }
    # Delete a lecturer's record by their staff number.
    #
    # + staffNumber - parameter description 
    # + return - returns can be any of following types
    # http:NoContent (The lecturer was deleted successfully.)
    # http:NotFound (The lecturer with the specified staff number does not exist.)
    resource function delete lecturers/[int staffNumber]() returns http:NoContent|http:NotFound {
    }
    # Retrieve all the lecturers that teach a certain course.
    #
    # + courseCode - parameter description 
    # + return - returns can be any of following types
    # Lecturer[] (A list of lecturers.)
    # http:NotFound (The course with the specified course code does not exist.)
    resource function get lecturers/courses/[string courseCode]() returns Lecturer[]|http:NotFound {
    }
    # Retrieve all the lecturers that sit in the same office.
    #
    # + officeNumber - parameter description 
    # + return - returns can be any of following types
    # Lecturer[] (A list of lecturers.)
    # http:NotFound (The office with the specified office number does not exist.)
    resource function get lecturers/offices/[int officeNumber]() returns Lecturer[]|http:NotFound {
    }
}
